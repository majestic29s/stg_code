AWSTemplateFormatVersion: "2010-09-09"
Description: VPC and Subnet Create

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Project Name Prefix"
        Parameters:
          - Env
          - Prefix
      - Label:
          default: "Network Configuration"
        Parameters:
          - region

    ParameterLabels:
      region:
        default: "region name"

# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------#
Parameters:
  Env:
    Type: String
    AllowedValues: ["dev", "pre", "prod"]
    Default: "dev"

  Prefix:
    Type: String
    Default: "tlsf"

  region:
    Type: String
    Default: "ap-northeast-1"

  MyIP:
    Type: String
    Default: 153.242.179.0/32
    #    Default: 133.158.0.0/16

  amiidweb:
    Type: String
    #    Default: "ami-0fa5e66a1cc2e0aa1" #Windows2022 ami-01d033a4281b702a8
    Default: "ami-00947d5060e83926c" #win2022 oracle
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: "ap-northeast-1"

  ##########################RDS##################################
  DBMasterUser:
    Type: String
    Default: "root"

  DBMasterPassword:
    Type: String
    Default: "Password#1"

Resources:
  # ------------------------------------------------------------#
  #  VPC
  # ------------------------------------------------------------#
  # VPC Create
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Prefix}-vpc"

  # InternetGateway Create
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Prefix}-igw"

  # IGW Attach
  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # ------------------------------------------------------------#
  #  NAT Gateway AZ:A
  # ------------------------------------------------------------#
  # NATGatewayA Create
  # NATGatewayA:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId: !GetAtt NATGatewayAEIP.AllocationId
  #     SubnetId: !Ref PublicSubnetA
  #     PrivateIpAddress: "10.0.10.10"
  #     Tags:
  #       - Key: Name
  #         Value: !Sub "${Env}-${Prefix}-natgw-a"

  # # NATGateway For EIP Create
  # NATGatewayAEIP:
  #   Type: "AWS::EC2::EIP"
  #   Properties:
  #     Domain: vpc

  # ------------------------------------------------------------#
  #  NAT Gateway AZ:C
  # ------------------------------------------------------------#
  # NATGatewayC Create
  # NATGatewayC:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId: !GetAtt NATGatewayCEIP.AllocationId
  #     SubnetId: !Ref PublicSubnetC
  #     PrivateIpAddress: "10.0.20.10"
  #     Tags:
  #       - Key: Name
  #         Value: !Sub "${Env}-${Prefix}-natgw-c"

  # # NATGateway For EIP Create
  # NATGatewayCEIP:
  #   Type: "AWS::EC2::EIP"
  #   Properties:
  #     Domain: vpc

  # ------------------------------------------------------------#
  #  Subnet
  # ------------------------------------------------------------#
  # Public SubnetA Create
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${region}a"
      CidrBlock: "10.0.10.0/24"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Prefix}-public-subnet-a"

  PublicSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${region}c"
      CidrBlock: "10.0.20.0/24"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Prefix}-public-subnet-c"

  # ------------------------------------------------------------#
  #  RouteTable
  # ------------------------------------------------------------#
  # Public RouteTableA Create
  PublicRouteTableA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Prefix}-public-route-a"

  PublicRouteTableC:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Prefix}-public-route-c"

  # ------------------------------------------------------------#
  # Routing
  # ------------------------------------------------------------#
  # PublicRouteA Create
  PublicRouteA:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicRouteC:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTableC
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # PrivateRouteA:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTableA
  #     DestinationCidrBlock: "10.0.0.0/16"
  #     GatewayId: !Ref NATGatewayA

  # PrivateRouteC:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTableC
  #     DestinationCidrBlock: "10.0.0.0/16"
  #     GatewayId: !Ref NATGatewayC

  # ------------------------------------------------------------#
  # RouteTable Associate
  # サブネットをルートテーブルに関連付けます。
  # ------------------------------------------------------------#
  # PublicRouteTable Associate SubnetA
  PublicSubnetARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTableA

  PublicSubnetCRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTableC

  # メンテナンスサーバのセキュリティグループ
  EC2SecurityGroupWork:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Env}-${Prefix}-sg-work"
      GroupDescription: !Sub "${Env}-${Prefix}-sg-work"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # RDP
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref MyIP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyIP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref MyIP
        - IpProtocol: tcp
          FromPort: 1521
          ToPort: 1521
          CidrIp: !Ref MyIP
        # - IpProtocol: tcp
        #   FromPort: 1521
        #   ToPort: 1521
        #   SourceSecurityGroupId: !Ref RdsSecurityGroupDB

  # ------------------------------------------------------------#
  # EC2 踏み台サーバ
  # ------------------------------------------------------------#
  EC2Work:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref amiidweb
      KeyName: !Ref KeyName
      InstanceType: t3.large #t3.large
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true" #PublicIPAddress add
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnetA
          GroupSet:
            - !Ref EC2SecurityGroupWork
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100 # ディスク容量を100GBに設定
      UserData: !Base64 |
        <powershell>
          msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi /qn
          # RDPポートの変更スクリプト
          # Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
          # Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'PortNumber' -Value 80
          # Restart-Computer -Force
          [System.Net.ServicePointManager]::SecurityProtocol = 'TLS12'
          $progressPreference = 'silentlyContinue'
          Invoke-WebRequest https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe -OutFile $env:USERPROFILE\Desktop\SSMAgent_latest.exe
          Start-Process -FilePath $env:USERPROFILE\Desktop\SSMAgent_latest.exe -ArgumentList "/S"
          rm -Force $env:USERPROFILE\Desktop\SSMAgent_latest.exe
          Restart-Service AmazonSSMAgent
        </powershell>
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Prefix}-ec2-work"

  ##########################RDS##################################
  RdsSecurityGroupDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Env}-${Prefix}-sg-db"
      GroupDescription: !Sub "${Env}-${Prefix}-sg-db"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroupWork

  # -------------------------------------
  # IAM Role
  # -------------------------------------
  RDSMonitoringRole: #RDSの拡張モニタリングの設定ロール
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Env}-${Prefix}-RDSMonitoringRole"
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
  # ------------------------------------------------------------#
  # Amazon RDS for postgres 環境構築
  # ------------------------------------------------------------#

  RDSSubnetGroup: #New OK20241205
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub "${Env}-${Prefix}-db-sub-gp"
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds: [!Ref PublicSubnetA, !Ref PublicSubnetC]
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Prefix}-db-sub-gp"

  #  -------------------------------------
  #  DB ParameterGroup
  #  -------------------------------------
  RDSInstanceParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Sub "${Env}-${Prefix}-rds-pg"
      Family: "postgres16"
      Parameters:
        # SQLの経過時間をログとして残す
        # 1なのでTrue
        log_duration: 1
        # SQLの実行に要した時間をログに記録
        # 10000msもしくはそれ以上長くかかった全てのSQL文がログとして残る
        log_min_duration_statement: 10000
        # どのSQL文をログに記録するか決める。allなので全て
        log_statement: all
        # タイムゾーン
        timezone: Asia/Tokyo

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: postgres
      EngineVersion: 16.6
      DBInstanceIdentifier: !Sub "${Env}-${Prefix}-db" #DB インスタンスの名前
      MasterUsername: !Ref DBMasterUser
      MasterUserPassword: !Ref DBMasterPassword
      DBInstanceClass: "db.t3.micro"
      StorageType: "gp3"
      AllocatedStorage: 20
      MultiAZ: false
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref RdsSecurityGroupDB
      DBName: !Sub "${Env}${Prefix}rdsinst"
      DBParameterGroupName: !Ref RDSInstanceParameterGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "19:00-19:30"
      CopyTagsToSnapshot: true
      StorageEncrypted: true
      EnablePerformanceInsights: true
      MonitoringInterval: 60
      MonitoringRoleArn: !GetAtt RDSMonitoringRole.Arn
      EnableCloudwatchLogsExports: [postgresql]
      AutoMinorVersionUpgrade: false #マイナーバージョンへのアップグレードの有効化
      PreferredMaintenanceWindow: "sun:20:00-sun:20:30" #システムメンテナンスが可能な時間帯
      DeletionProtection: false
      EnableIAMDatabaseAuthentication: true
      Tags:
        - Key: Name
          Value: !Sub "${Env}-${Prefix}-db-a"

# ------------------------------------------------------------#
# Output Parameters
# ------------------------------------------------------------#
Outputs:
  # VPC
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub "${Env}-${Prefix}-vpc"

  # Subnet
  PublicSubnetA:
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${Env}-${Prefix}-public-subnet-a"

  # Route
  PublicRouteTableA:
    Value: !Ref PublicRouteTableA
    Export:
      Name: !Sub "${Env}-${Prefix}-public-route-a"

  EC2SecurityGroupWork:
    Value: !Ref EC2SecurityGroupWork
    Export:
      Name: !Sub "${Env}-${Prefix}-sg-work"

  ##########################RDS##################################
  RDSInstance:
    Value: !Ref RDSInstance
    Export:
      Name: !Sub "${Env}-${Prefix}-db-a"
